package revanee.scalapay;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import revanee.scalapay.exceptions.ScalaPayException;
import revanee.scalapay.exceptions.UnsuccessfulRequestException;
import revanee.scalapay.model.objects.Address;
import revanee.scalapay.model.objects.Amount;
import revanee.scalapay.model.objects.Consumer;
import revanee.scalapay.model.objects.Item;
import revanee.scalapay.model.objects.Merchant;
import revanee.scalapay.model.requests.CaptureRequest;
import revanee.scalapay.model.requests.OrderRequest;
import revanee.scalapay.model.requests.VoidRequest;
import revanee.scalapay.model.responses.CaptureResponse;
import revanee.scalapay.model.responses.OrderResponse;
import revanee.scalapay.model.responses.VoidResponse;
import java.io.IOException;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("Integration")
class ScalaPayConnectorIntegrationTest {

  private OrderRequest testOrderRequest;
  private ScalaPayConnector connector;

  @BeforeEach
  void init() {
    connector = new ScalaPayConnector(ScalaPayConstants.SANDBOX_URL, ScalaPayConstants.SANDBOX_KEY);
    testOrderRequest = OrderRequest.builder()
        .merchantReference("merchantOrder-1234")
        .totalAmount(Amount.builder()
            .amount(99.0f)
            .currency("EUR")
            .build())
        .consumer(Consumer.builder()
            .surname("Smith")
            .givenNames("John")
            .build())
        .shipping(Address.builder()
            .name("John Smith")
            .line1("Via Italia 1")
            .postcode("50056")
            .countryCode("IT")
            .build())
        .items(List.of(
            Item.builder()
                .sku("12341234")
                .name("T-Shirt")
                .price(Amount.builder()
                    .currency("EUR")
                    .amount(0.0f)
                    .build())
                .category("clothes")
                .quantity(1)
                .build()))
        .merchant(Merchant.builder()
            .redirectCancelUrl("https://portal.integration.scalapay.com/failure-url")
            .redirectConfirmUrl("https://portal.integration.scalapay.com/success-url")
            .build())
        .build();
  }

  @Test
  void createOrder() throws ScalaPayException {
    OrderResponse orderResponse = connector.createOrder(testOrderRequest);
    assertTrue(orderResponse.getToken() != null && !orderResponse.getToken().isEmpty());
    System.out.println(
        "Success! The order token is " + orderResponse.getToken()
            + " Follow this link to approve the order: " + orderResponse.getCheckoutUrl());
  }

  @Test
  void captureOrder() throws ScalaPayException, IOException {
    // Change the order token to the one generated by createOrder
    String orderToken = "CHANGE_ME";
    CaptureRequest captureRequest = CaptureRequest.builder()
        .token(orderToken)
        .amount(testOrderRequest.getTotalAmount())
        .merchantReference(testOrderRequest.getMerchantReference())
        .build();
    CaptureResponse response;
    try {
      response = connector.capturePayment(captureRequest);
    } catch (UnsuccessfulRequestException e) {
      System.out.println(e.getResponse().body().string());
      throw e;
    }
    assertEquals("APPROVED", response.getStatus());
  }

  @Test
  void voidPayment() throws ScalaPayException, IOException {
    // Change the order token to the one generated by createOrder
    String orderToken = "CHANGE_ME";
    VoidRequest voidRequest = VoidRequest.builder()
        .token(orderToken)
        .build();
    VoidResponse response;
    try {
      response = connector.voidPayment(voidRequest);
    } catch (UnsuccessfulRequestException e) {
      System.out.println(e.getResponse().body().string());
      throw e;
    }
    assertEquals(orderToken, response.getToken());
  }
}